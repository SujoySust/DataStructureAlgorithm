Linked lists and arrays are two fundamental data structures, each with its own set of advantages and disadvantages.
The choice between them depends on the specific requirements and constraints of your application.
Here are some pros and cons of linked lists compared to arrays:

Pros of Linked Lists:

- Dynamic Size: Linked lists can easily grow or shrink in size, as elements can be added or removed without the need for resizing operations.
- Insertions and Deletions: Inserting or deleting an element in a linked list at a specific position is more efficient than in an array,
    - especially in the middle, because it doesn't require shifting elements.
- Memory Allocation: Linked lists can efficiently use memory, as they allocate memory for each element individually,
    - reducing the likelihood of memory wastage due to unused space.
- No Fixed Size: Unlike arrays, linked lists don't require you to specify a fixed size when creating them, making them more flexible.
- No Need for Copying: When resizing a linked list, you don't need to copy elements to a new location as you might 
    - with an array when it needs to grow beyond its current capacity.

Cons of Linked Lists:

- Random Access: Accessing an element at a specific position in a linked list takes O(n) time complexity on average, where n is the number of elements, as you need to traverse the list from the beginning.
- Memory Overhead: Linked lists require extra memory for storing pointers/references to the next element, which can lead to more memory usage compared to arrays.
- Cache Performance: Due to non-contiguous memory allocation, linked lists can have worse cache performance compared to arrays, which store elements consecutively in memory.
- Complexity: Linked lists can be more complex to implement and manage than simple arrays, especially when dealing with pointers and memory allocation.

Use Cases for Linked Lists:

- When you need efficient insertions and deletions, especially in the middle of the list.
- When the size of the data structure is not known in advance and needs to grow or shrink dynamically.
- When you want to avoid the overhead of resizing arrays as they grow.
- When memory allocation and fragmentation are a concern.

Use Cases for Arrays:

- When you require fast and direct access to elements by index (random access).
- When memory usage needs to be minimized, especially in cases with a fixed size.
- When cache performance is critical for your application.
- When you have a clear understanding of the size requirements in advance.
- In many cases, the choice between linked lists and arrays comes down to trade-offs between time complexity, memory usage, and the specific needs of your application.

Time complexity: 
    - Prepend: O(1)
    - Append: O(1)
    - Lookup: O(n)
    - Insert: O(n)
    - Delete: O(n)