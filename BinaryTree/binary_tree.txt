Binary Tree

- The maximum number of nodes at level l of a binary tree is 2^l. 
Here level is the number of nodes on the path from the root to the node (including root and node). Level of the root is 0. 
This can be proved by induction. 
For root, l = 0, number of nodes = 20 = 1 
Assume that the maximum number of nodes on level l is 2l 
Since in Binary tree every node has at most 2 children, next level would have twice nodes, i.e. 2 * 2l 

- The Maximum number of nodes in a binary tree of height h is 2^h - 1. 
Here the height of a tree is the maximum number of nodes on the root to leaf path. Height of a tree with a single node is considered as 1. 
This result can be derived from point 2 above. A tree has maximum nodes if all levels have maximum nodes. So maximum number of nodes in a binary tree of height h is 1 + 2 + 4 + .. + 2h-1. This is a simple geometric series with h terms and sum of this series is 2h– 1. 
In some books, the height of the root is considered as 0. In this convention, the above formula becomes 2^h+1 - 1 

- In a Binary Tree with N nodes, minimum possible height or the minimum number of levels is Log2(N+1).
This can be directly derived from point 2 above. If we consider the convention where the height of a root node is considered as 0, then above formula for minimum possible height becomes | Log2(N+1) | – 1 

- A Binary Tree with L leaves has at least | Log2L |+ 1   levels. 
A Binary tree has the maximum number of leaves (and a minimum number of levels) when all levels are fully filled. Let all leaves be at level l, then below is true for the number of leaves L. 

L   <=  2l-1  [From Point 1]
l =   | Log2L | + 1 
where l is the minimum number of levels.

- In Binary tree where every node has 0 or 2 children, the number of leaf nodes is always one more than nodes with two children.

L = T + 1
Where L = Number of leaf nodes
T = Number of internal nodes with two children
Proof:
No. of leaf nodes (L) i.e. total elements present at the bottom of tree = 
2h-1 (h is height of tree)
No. of internal nodes = {total no. of nodes} - {leaf nodes} = 
{ 2h - 1 } - {2h-1} = 2h-1 (2-1) - 1 = 2h-1 - 1
So , L = 2h-1
     T = 2h-1 - 1
Therefore L = T + 1
Hence proved

The following are common types of Binary Trees. 

- Full Binary Tree A Binary Tree is a full binary tree if every node has 0 or 2 children. 

The following are the examples of a full binary tree. 
We can also say a full binary tree is a binary tree in which all nodes except leaf nodes have two children.

               18
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40

             18
           /    \   
         15     20    
        /  \       
      40    50   
    /   \
   30   50

               18
            /     \  
          40       30  
                   /  \
                 100   40

- Complete Binary Tree: 
- A Binary Tree is a Complete Binary Tree if all the levels are completely filled except possibly the last level and the last level has all keys as left as possible 

The following are examples of Complete Binary Trees 

               18
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40


               18
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40
     /  \   /
    8   7  9 

- Perfect Binary Tree A Binary tree is a Perfect Binary Tree in which all the internal nodes have two children and all leaf nodes are at the same level. 
- The following are the examples of Perfect Binary Trees. 

            18
            /   \  
        15        30  
        /  \      /  \
      40   50    100   40


            18
          /    \  
        15      30

        In a Perfect Binary Tree, the number of leaf nodes is the number of internal nodes plus 1   

        L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes.
       
       A Perfect Binary Tree of height h (where the height of the binary tree is the number of edges in the longest path from the root node to any leaf node in the tree, height of root node is 0) has 2h+1 - 1 node. 

- Balanced Binary Tree 
A binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes. For Example, the AVL tree maintains O(Log n) height by making sure that the difference between the heights of the left and right subtrees is at most 1. Red-Black trees maintain O(Log n) height by making sure that the number of Black nodes on every root to leaf paths is the same and there are no adjacent red nodes. Balanced Binary Search trees are performance-wise good as they provide O(log n) time for search, insert and delete. 

A degenerate (or pathological) tree A Tree where every internal node has one child. Such trees are performance-wise same as linked list. 

      10
      /
    20
     \
     30
      \
      40

 - TimeComplexity Balance Binary tree:
 Lookup O(log(N))
 Insert O(log(N))
 Delete O(log(N))
  
 - TimeComplexity Unbalance Binary Tree:
 Lookup O(n)
 Insert O(n)
 Delete O(n)

 - Pros
 Better than O(n)
 Ordered
 Flexible Size

 - Cons
 No O(1) operation
